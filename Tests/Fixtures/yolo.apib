FORMAT: 1A
HOST: https://cdn.contentful.com
# Content Delivery API

The Contentful Delivery API is a _fast_ read-only API for retrieving your content from Contentful. Content is delivered as JSON data; images, videos and other media is delivered as files.

It is powered by our global CDN so you get the benefits of our content-aware caching: All content, both JSON and binary, is served from the server closest to where a user is requesting content from. This minimizes latency, which especially mobile apps can greatly benefit from. Also, hosting content in multiple datacenters around the world greatly improves the availability of content.

## Contentful is an API-first CMS for delivering content to any device.

You are now looking at the API references. Visit [Contentful developer center](https://www.contentful.com/developers/docs/) for more documentation and developer tools.

See also references to other Contentful APIs:
* [Content Delivery API][cda-reference]
* [Content Management API][cma-reference]
* [Content Preview API][cpa-reference]
* [Images API][images-reference]

[cda-reference]:https://www.contentful.com/developers/docs/references/content-delivery-api
[cma-reference]:https://www.contentful.com/developers/docs/references/content-management-api
[cpa-reference]:https://www.contentful.com/developers/docs/references/content-preview-api
[images-reference]: https://www.contentful.com/developers/docs/references/images-api

## Authentication

To get content from the Content Delivery API, clients need to provide an access token. Access tokens are created per Space and are used by clients to access the Space's content.

You can create Access tokens for your own Spaces in the "API" tab of the web interface.

The Content Delivery API implements the standardized OAuth 2.0 Bearer Token Specification. This authorization scheme is very simple and already supported by many HTTP clients.

The API supports two mechanisms for supplying the access token.

As an Authorization HTTP request-header field and as an URI query parameter named `access_token`.

## Common Resource Attributes

Every resource returned by the Content Delivery API will have a `sys` property, which is an object containing system managed metadata. The exact metadata available depends on the type of the resource, but at minimum the `sys.type` property should be defined. 

Note that none of the `sys` fields are editable and only the `sys.id` field can be specified in the creation of an item (as long as it is not a Space).

The `sys.id` property will be defined for every resource that is not a collection. For example, a `Space` resource will have a `sys.type` and `sys.id`:

```json
{
  "sys": {
    "type": "Space",
    "id": "cfexampleapi"
  }
}
```

Field          |Type          |Description                     |Applies to
---------------|--------------|--------------------------------|-----------------------------
sys.type       |String        |Type of resource.               |All
sys.id         |String        |Unique ID of resource.          |All except Arrays
sys.space      |Link          |Link to resource's Space.       |Entries, Assets, Content Types
sys.contentType|Link          |Link to Entry's Content Type.   |Entries
sys.revision   |Integer       |Version of resource.            |Entries, Assets, Content Types
sys.createdAt  |Date          |Time entity was created.        |Entries, Assets, Content Types
sys.updatedAt  |Date          |Time entity was updated.        |Entries, Assets, Content Types
sys.locale     |String        |Locale of the resource.         |Entries and Assets

## Collection Resources and Pagination

Collections of resources are returned in a wrapper object that contains additional information useful for pagination over large result sets:

```json
{
  "sys": { "type": "Array" },
  "skip": 0,
  "limit": 100,
  "total": 1256,
  "items": [ /* 100 individual resources */ ]
}
```

In the above example, a client would get the next 100 resources by repeating their request with the `skip` query parameter set to `100`. Keep in mind that you should use the `order` parameter when paging through larger result sets, for example `order=sys.createdAt`.

## Errors

Whenever something goes wrong with an API request, the server returns an error. Information about the error is indicated by an HTTP status code, with further details in the response body, which will be a JSON resource.

Errors share the same common attribues as other API resources; they have a `sys` property, where `sys.type` is always `"Error"` and `sys.id` identifies the exact error that occured. They also always have a `message` property which will be a short description of what went wrong.

Finally, some errors resulting from bad input (such as `ValidationFailed` errors) contain a `details` property. This property is structured data that indicates more precisely what was wrong with the input.

### Shared error types

HTTP Status Code |Error Code       |Description
-------------------|-----------------|----------------------------------------------------------------------------------
`400`|`BadRequestError`|The request was malformed or it is missing a required parameter.
`400`|`InvalidQueryError`|The request contained invalid or unknown query parameters.
`401`|`AccessTokenInvalidError`|The authorization token was invalid.
`403`|`AccessDeniedError`|The user tried to access a resource that they do not have access to. This could include a missing role.
`404`|`NotFoundError`|The requested resource or endpoint could not be found.
`422`|`ValidationFailedError`|The triggered query references an invalid field.
`429`|`RateLimitExceededError`|The user sends too many requests per second.
`500`|`ServerError`|Something went wrong on our end.
`502`|`AccessDeniedError`|The space has not been used for a long time and hence it has been hibernated, but it will reappear if the user begins using it again.

## HTTP Details

Learn more [on our Developer Center](https://www.contentful.com/developers/docs/references/http-details/).

# Group Spaces

All content in Contentful belongs to a _Space_. You can think of spaces like databases, you will generally have at least one space for a project, but may opt to use a separate space for e.g. testing.

## Space [/spaces/{space_id}?access_token={access_token}]

Each space has a name, a set of locales, and some system metadata.

+ Parameters
    + space_id (required, string, `cfexampleapi`) ... Alphanumeric `id` of the Space to retrieve.
    + access_token (required, string, `b4c0n73n7fu1`) ... A *production* Content Delivery API Key.

+ Model (application/vnd.contentful.delivery.v1+json)

        {
          "sys": {
            "type": "Space",
            "id": "cfexampleapi"
          },
          "name": "Contentful Example API",
          "locales": [
            {
              "code": "en-US",
              "default": true,
              "name": "English"
            },
            {
              "code": "tlh",
              "default": false,
              "name": "Klingon"
            }
          ]
        }

### Get a Space [GET]

+ Response 200

    [Space][]

# Group Content Types

Content Types are schemas that define the fields of Entries. Every Entry can
only contain values in the fields defined by it's Content Type, and the values
of those fields must match the data type defined in the Content Type.

Content Type properties:

Field       |Type        |Description
------------|------------|----------------------------------------------------------
sys         |Sys         |Common system properties.
name        |String      |Name of the Content Type.
description |String      |Description of the Content Type.
fields      |\[Field\]   |List of Fields.
displayField|String      |ID of main Field used for display.

Each Field in the Content Type describes a single allowed field value of an Entry:

Field      |Type          |Description
-----------|--------------|-------------------------------------------
id         |String        |The `id` of a field corresponds to a key in the `fields` property of entries with this Content Type. It must be unique among all fields in the content type.
name       |String        |The `name` of the field is the human readable label that will be used for this field in the Contentful web application.
type       |String        |The `type` of the field determines what data can be stored here, as well was what query operations you can perform with this field. See below for more details.
items      |Schema        | Defines a subschema for the elements of an array field. This is required when `type` is `"Array"`.
required   |Boolean       |Describes whether the Field is mandatory.
localized  |Boolean       |Describes whether the Field will support different values for different locales.
disabled   |Boolean       |Describes whether the Field is disabled. Disabled fields are hidden in the editing application.

All data in Contentful has a field type, which is defined in the [creation of a content type](https://www.contentful.com/developers/docs/references/content-management-api/#/reference/content-types/create-a-content-type). 

Each field type corresponds to a JSON type, though there are more field types than JSON types.


Name   |JSON Type|Description|Example
-------|--------------|-----------|------------
Symbol<sup>1</sup> |String        |Basic list of characters. Maximum length is 256.| `"The title"`
Text<sup>2</sup>   |String        |Same as Symbol, but filterable via Full-Text Search. Maximum length is 50,000.| `" This is a post and ..."`
Integer|Number        |Number type without decimals. Values from  -2^53 to 2^53. | `42`
Number |Number        |Number type with decimals. | `3.14`
Date<sup>3</sup>  |String        |Date/Time in ISO-8601 format. | `"2015-11-06T09:45:27"`
Boolean|Boolean       |Flag, `true` or `false` | true
Location|Object        |A geographic location specified in latitude and longitude. | `{"lat":"52.5018616","lon":"13.4112619"}`
Link   |Object        |A reference to an entry or asset. The type of the referenced item is defined by the `linkType` property. See [links](https: //www.contentful.com/developers/docs/concepts/links/) for more information| `{"sys": {"type": "Link", "linkType": "Entry", "id": "af35vcx8etbtwe8xv"}}`
Array  |Array         |List of values. See **Array fields** below for details on what types of values can be stored in an array. |`["name1", "name2", ...]`
Object |Object        |Arbitrary Object. | `{"somekey": ["arbitrary", "json"]}"`

1. **Symbol**: fields do not support the `match` operator for full-text searching within the field value

2. **Text**: fields do not support ordering or strict equality

3. **Date**: fields must be ISO8601 formatted, but do not require a time portion

#### Array fields

Contentful supports fields that contain multiple values with it's `Array` type. Currently an array can contain either symbols (strings up to 256 characters), **or** [links](/developers/docs/concepts/links/) to other entries or assets. The allowed values in the array are defined by the `items` property of the field definition.

A field that contains symbols is defined like this:

```
{
  "id": "tags",
  "type": "Array",
  "items": { "type": "Symbol" }
}
```

And a field containing an array of links to assets is defined like this:

```
{
  "id": "relatedImages",
  "type": "Array",
  "items": { "type": "Link", "linkType": "Asset" }
}
```

## Content Type Collection [/spa_id}/content_types?access_token={access_token}]

+ Parameters
    + space_id: cfexampleapi (required, string) - ID of the Space in form of a string

### Get all content types of a Space [GET]

+ Response 200 (application/vnd.contentful.delivery.v1+json)

    + Attributes (Empty Array)

## Content Type [/spaces/{space_id}/content_types/{content_type_id}?access_token={access_token}]

+ Parameters
    + space_id: cfexampleapi (required, string) - ID of the Space in form of a string
    + access_token (required, string, `b4c0n73n7fu1`) ... A *production* Content Delivery API Key.
    + content_type_id: cat (required, string) - ID of the Content Type in form of a string

### Get a single Content Type [GET]

+ Response 200 (application/vnd.contentful.delivery.v1+json)

    + Attributes (Content Type)

# Group Entries

Entries are the documents contained within a space. They might represent blog posts or events or anything else that you have defined a [Content Type](#content-types) for.

## Entries Collection [/spaces/{space_id}/entries?access_token={access_token}]

+ Parameters
    + space_id (required, string, `cfexampleapi`) ... Alphanumeric `id` of the Space to retrieve.
    + access_token (required, string, `b4c0n73n7fu1`) ... A *production* Content Delivery API Key.

### Get all entries of a Space [GET]

+ Response 200 (application/vnd.contentful.delivery.v1+json)

    + Attributes (Empty Array)

## Entry [/spaces/{space_id}/entries/{entry_id}?access_token={access_token}]

+ Parameters
    + space_id (required, string, `cfexampleapi`) ... Alphanumeric `id` of the Space to retrieve.
    + access_token (required, string, `b4c0n73n7fu1`) ... A *production* Content Delivery API Key.
    + entry_id (required, string, `nyancat`) ... Alphanumeric `id` of the Entry to retrieve

### Get a single entry [GET]

  + Response 200 (application/vnd.contentful.delivery.v1+json)

      + Attributes (Entry)

# Group Assets

## Assets Collection [/spaces/{space_id}/assets?access_token={access_token}]

Assets represent files in a Space. An asset can be any kind of file: an image, a video, an audio file, a PDF or any other filetype. Assets are usually attached to Entries through Links.

Assets can optionally be localized by providing separate files for each locale. Those Assets which are not localized simply provide a single file under the default locale.

When querying the Content Delivery API for Entries which contain Links to Assets then all Assets will be included by default.

Resize image assets on the fly by supplying the desired dimensions as query parameters.

Field                           |Type          |Description
--------------------------------|--------------|------------------------------------------------
sys                             |Sys           |Common system properties.
fields.title                    |Text          |Title of the Asset.
fields.description              |Text          |Description of the Asset.
fields.file                     |File          |File(s) of the Asset.
fields.file.fileName            |Symbol        |Original filename of the file.
fields.file.contentType         |Symbol        |Content type of the file.
fields.file.url                 |Symbol        |URL of the file.
fields.file.details             |Object        |Details of the file, depending on its mime type.
fields.file.details.size        |Number        |Size (in bytes) of the file.

+ Parameters
    + space_id: cfexampleapi (required, string) - ID of the Space in form of a string
    + access_token (required, string, `b4c0n73n7fu1`) ... A *production* Content Delivery API Key.

+ Model (application/vnd.contentful.delivery.v1+json)

        {
          "sys": {
            "type": "Asset",
            "id": "nyancat",
            "space": {"sys": {"type": "Link", "linkType": "Space", "id": "example"}},
            "createdAt": "2013-03-26T00:13:37.123Z",
            "updatedAt": "2013-03-26T00:13:37.123Z",
            "revision": 1
          },
          "fields": {
             "title": "Nyan cat",
             "description": "A typical picture of Nyancat including the famous rainbow trail.",
             "file": {
                "fileName": "nyancat.png",
                "contentType": "image/png",
                "details": {
                   "image": {
                      "width": 250,
                      "height": 250
                    },
                    "size": 12273
                 },
                "url": "//images.contentful.com/cfexampleapi/4gp6taAwW4CmSgumq2ekUm/9da0cd1936871b8d72343e895a00d611/Nyan_cat_250px_frame.png"
               }
            }
        }

### Get all Assets of a Space [GET]

+ Response 200 (application/vnd.contentful.delivery.v1+json)

    + Attributes (Empty Array)

## Asset [/spaces/{space_id}/assets/{asset_id}?access_token={access_token}]

### Image Asset resizing

Instead of chosing image dimensions in Content Management you can specify the dimensions of images during delivery.

Images are hosted on `images.contentful.com`. For files on this host you can attach the URI query parameters `w` and/or `h` to specify the desired dimensions. The image will never be stretched, skewed or enlarged. Instead it will be fit into the bounding box given by the `w` and `h` parameters.

Additionaly, a `q` can be passed to define the JPEG compression quality between 1 and 100 and the `fm` parameter can be used to change the format to either "png" or "jpg".

Example URL: <https://images.contentful.com/cfexampleapi/4gp6taAwW4CmSgumq2ekUm/9da0cd1936871b8d72343e895a00d611/Nyan_cat_250px_frame.png?w=100&fm=jpg&q=50>

+ Parameters
    + space_id: cfexampleapi (required, string) - ID of the Space in form of a string
    + asset_id: nyancat (required, string) - ID of the Asset in form of a string
    + access_token (required, string, `b4c0n73n7fu1`) ... A *production* Content Delivery API Key.

### Get a single Asset [GET]

+ Response 200 (application/vnd.contentful.delivery.v1+json)

    + Attributes (Asset)

# Group Search Parameters

Each collection endpoint supports a variety of query parameters to search & filter the items that will be included in the response. While the API calls in this section are focused on entries, the same query parameter syntax can be used to filter assets and content types as well.

## Content Type [/spaces/{space_id}/entries?access_token={access_token}&content_type={content_type}]

Search for Entries with a specific Content Type by setting the content_type URI query parameter to the ID of the Content Type you want to search for'. Please note that only one value for content_type can be specified at a time.

When querying Entries and using search filters based on `fields` or ordering by `fields` you must specify this parameter.

+ Parameters
    + space_id (required, string, `cfexampleapi`) ... Alphanumeric `id` of the Space to retrieve.
    + access_token (required, string, `b4c0n73n7fu1`) ... A *production* Content Delivery API Key.
    + content_type (required, string, `cat`) ... Alphanumeric `id` of the Content Type to retrieve.

### Query Entries [GET]

Let's find all Entries of Content Type "cat".

+ Response 200 (application/vnd.contentful.delivery.v1+json)

  + Attributes (Empty Array)

## Search for exact matches by using the equality operator. [/spaces/{space_id}/entries?access_token={access_token}&{attribute}={value}]

A reason to query an Entry by ID instead of retrieving the Entry itself might be because you want to include resolved links.

Note that equality & inequality operators are not supported for Text fields.

+ Parameters
    + space_id (required, string, `cfexampleapi`) ... Alphanumeric `id` of the Space to retrieve.
    + access_token (required, string, `b4c0n73n7fu1`) ... A *production* Content Delivery API Key.
    + attribute (required, string, `sys.id`) ... The attribute to match.
    + value (required, `nyancat`) ... The value to match.

### Query Entries [GET]

Let's find all Entries with ID nyancat (hint: IDs are unique and there can only be one).

+ Response 200 (application/vnd.contentful.delivery.v1+json)

  + Attributes (Empty Array)

## The inequality operator can be used to look for fields that don't match a specific value. [/spaces/{space_id}/entries?access_token={access_token}&{attribute}%5Bne%5D={value}]

Note that equality & inequality operators are not supported for Text fields.

+ Parameters
    + space_id (required, string, `cfexampleapi`) ... Alphanumeric `id` of the Space to retrieve.
    + access_token (required, string, `b4c0n73n7fu1`) ... A *production* Content Delivery API Key.
    + attribute (required, string, `sys.id`) ... The attribute to match.
    + value (required, `nyancat`) ... The value to match.

### Query Entries [GET]

For example, here's how to get all Entries except nyancat.

+ Response 200 (application/vnd.contentful.delivery.v1+json)

  + Attributes (Empty Array)

## Equality/Inequality for arrays [/spaces/{space_id}/entries?access_token={access_token}&content_type={content_type}&fields.{field_id}={value}]

The equality/inequality operators also works with Array fields: If one of the items in an Array field matches the value the field will match. Also, as it filters by a field, it becomes necessary to specify a Content Type.

+ Parameters
    + space_id (required, string, `cfexampleapi`) ... Alphanumeric `id` of the Space to retrieve.
    + access_token (required, string, `b4c0n73n7fu1`) ... A *production* Content Delivery API Key.
    + content_type (required, string, `cat`) ... Alphanumeric `id` of the Content Type to retrieve.
    + field_id (required, string, `likes`) ... The attribute to match.
    + value (required, `lasagna`) ... The value to match.

### Query Entries [GET]

Let's find all cats who like lasagna by matching fields.likes (Array) against a single value.

+ Response 200 (application/vnd.contentful.delivery.v1+json)

  + Attributes (Empty Array)

## Inclusion [/spaces/{space_id}/entries?access_token={access_token}&{attribute}%5Bin%5D={value}]

Filter a field by multiple values via the `in` operator.
When applied to an array value there must be at least one matching item. Similarly, when including a field value, it's necessary to specify a Content Type.

+ Parameters
    + space_id (required, string, `cfexampleapi`) ... Alphanumeric `id` of the Space to retrieve.
    + access_token (required, string, `b4c0n73n7fu1`) ... A *production* Content Delivery API Key.
    + attribute (required, string, `sys.id`) ... The attribute to match.
    + value (required, `finn,jake`) ... The value to match.

### Query Entries [GET]

Let's get Entries for finn and jake.

+ Response 200 (application/vnd.contentful.delivery.v1+json)

  + Attributes (Empty Array)

## Exclusion [/spaces/{space_id}/entries?access_token={access_token}&content_type={content_type}&{attribute}%5Bnin%5D={value}]

Filter a field by multiple values via the `nin` operator.
When applied to an array value there must be at least one not matching item. Similarly, when including a field value, it's necessary to specify a Content Type.

+ Parameters
    + space_id (required, string, `cfexampleapi`) ... Alphanumeric `id` of the Space to retrieve.
    + access_token (required, string, `b4c0n73n7fu1`) ... A *production* Content Delivery API Key.
    + content_type (required, string, `cat`) ... Alphanumeric `id` of the Content Type to retrieve.
    + attribute (required, string, `fields.likes`) ... The attribute to match.
    + value (required, `rainbows,lasagna`) ... The value to match.

### Query Entries [GET]

Let's get all cats that like neither rainbows nor lasagna.

+ Response 200 (application/vnd.contentful.delivery.v1+json)

  + Attributes (Empty Array)

## Existence [/spaces/{space_id}/entries?access_token={access_token}&{attribute}%5Bexists%5D={value}]

You can check for the presence of a field using the `exists` operator.

+ Parameters
    + space_id (required, string, `cfexampleapi`) ... Alphanumeric `id` of the Space to retrieve.
    + access_token (required, string, `b4c0n73n7fu1`) ... A *production* Content Delivery API Key.
    + attribute (required, string, `sys.archivedVersion`) ... The attribute to match.
    + value (required, boolean, `false`) ... The value to match.

### Query Entries [GET]

Let's find all non-archived entries.

+ Response 200 (application/vnd.contentful.delivery.v1+json)

  + Attributes (Empty Array)

## Ranges [/spaces/{space_id}/entries?access_token={access_token}&content_type={content_type}&{attribute}%5Blte%5D={value}]

Four range operators are available:

- `lt`: Less than
- `lte`: Less than or equal to
- `gt`: Greater than
- `gte`: Greater than or equal to

Those operators can be applied to Date and Number Fields. 

When applied to field values, there must be a specified Content Type in the query. 

+ Parameters
    + space_id (required, string, `cfexampleapi`) ... Alphanumeric `id` of the Space to retrieve.
    + access_token (required, string, `b4c0n73n7fu1`) ... A *production* Content Delivery API Key.
    + content_type (required, string, `cat`) ... Alphanumeric `id` of the Content Type to retrieve.
    + attribute (required, string, `sys.updatedAt`) ... The attribute to match.
    + value (required, `2013-01-01T00:00:00Z`) ... The value to match.

### Query Entries [GET]

Let's look for Entries that've been updated since midnight of January 1st 2013.

+ Response 200 (application/vnd.contentful.delivery.v1+json)

  + Attributes (Empty Array)

## Full-text Search [/spaces/{space_id}/entries?access_token={access_token}&query={value}]

Full-text search across all Text and Symbol Fields via query querystring parameter. Please take into account that full text search is case insensitive and therefore you might get more results than expected.

+ Parameters
    + space_id (required, string, `cfexampleapi`) ... Alphanumeric `id` of the Space to retrieve.
    + access_token (required, string, `b4c0n73n7fu1`) ... A *production* Content Delivery API Key.
    + value (required, string, `bacon`) ... The value to match.

### Query Entries [GET]

Let's find all Entries matching "bacon".

+ Response 200 (application/vnd.contentful.delivery.v1+json)

  + Attributes (Empty Array)

## Full-text Search on a specific field via match operator [/spaces/{space_id}/entries?access_token={access_token}&content_type={content_type}&fields.{field_id}%5Bmatch%5D={value}]

After specifying a Content Type, it is possible to filter results based on a given field.

+ Parameters
    + space_id (required, string, `cfexampleapi`) ... Alphanumeric `id` of the Space to retrieve.
    + access_token (required, string, `b4c0n73n7fu1`) ... A *production* Content Delivery API Key.
    + content_type (required, string, `dog`) ... Alphanumeric `id` of the Content Type to retrieve.
    + field_id (required, string, `description`) ... Alphanumeric `id` of Field to retrieve.
    + value (required, string, `bacon pancakes`) ... The value to match.

### Query Entries [GET]

Let's find all things with "bacon pancakes" in their description.

+ Response 200 (application/vnd.contentful.delivery.v1+json)

  + Attributes (Empty Array)

## Location proximity search [/spaces/{space_id}/entries?access_token={access_token}&fields.center%5Bnear%5D={coordinate}&content_type={content_type}]

Contentful works great with location-enabled content:

- Let users find places closest to where they currently are
- Show places within a specific map area
- Find places in the vicinity of another place

Entries can have location fields. For example, imagine a City Entry
with a field called `center` indicating where the city is located.
Once you've added location information to your content you can benefit from
all of the above features simply by using the search in a specific way.

When you are performing geographical searches please keep in mind that queries including exact coordinates are usually no able to take advantage of our caching layer. Depending on your use-case it might be enough to round the coords to 3 decimal places (accuracy ~100m) or 2 decimal places (accuracy ~1km) or even further to improve your cache-hit rate.

+ Parameters
    + space_id (required, string, `cfexampleapi`) ... Alphanumeric `id` of the Space to retrieve.
    + access_token (required, string, `b4c0n73n7fu1`) ... A *production* Content Delivery API Key.
    + content_type (required, string, `1t9IbcfdCk6m04uISSsaIK`) ... Alphanumeric `id` of the Content Type to retrieve.
    + coordinate (required, string, `38,-122`) ... Latitude and longitude of a location.

### Query Entries [GET]

A common use case for location search is to search for places close to the user's current position.


Use the `near` operator to show results closest to a specific map location and order the results by distance.

This will return all entries sorted by distance from the point at latitude=38 and a longitude=-122.

+ Response 200 (application/vnd.contentful.delivery.v1+json)

  + Attributes (Empty Array)

## Locations in bounding object [/spaces/{space_id}/entries?access_token={access_token}&fields.center%5Bwithin%5D={rectangle}&content_type={content_type}]

When you're displaying content on a map it makes sense to retrieve only content that is visible on the currently visible map rectangle or circle. For these cases, use the `within` operator.

Similar to the "near me" use case, this lets you search for locations that are within the specific object on the map. This can be useful for finding related Entries that are in the vicinity of another Entry.

There are two mechanisms to search for nearby locations:

1) Using a bounding rectangle: 

To search for locations within a rectangle object, use the structure `field.center[within]=latitude1,longitude1,latitude2,longitude2` where:

 + `latitude1` and `longitude1` refer to the the coordinates of the bottom left corner of the rectangle;

 + `latitude2` and `longitude2` refer to the coordinates of the top right corner of the rectangle;

2) Using a bounding circle: 

The structure `field.center[within]=latitute,longitude,radius` will return Entries included in the circle with `fields.center` of the given latitude, longitude and radius.

+ Parameters
    + space_id (required, string, `cfexampleapi`) ... Alphanumeric `id` of the Space to retrieve.
    + access_token (required, string, `b4c0n73n7fu1`) ... A *production* Content Delivery API Key.
    + content_type (required, string, `1t9IbcfdCk6m04uISSsaIK`) ... Alphanumeric `id` of the Content Type to retrieve.
    + rectangle (required, string, `36,-124,40,-120`) ... Coordinate rectangle to search in.

### Query Entries [GET]

This will return entries where `fields.center` is within the rectangle with:

- Bottom left corner: latitude 1, longitude 2
- Top right corner: latitude 3, longitude 4

+ Response 200 (application/vnd.contentful.delivery.v1+json)

  + Attributes (Empty Array)

## Order [/spaces/{space_id}/entries?access_token={access_token}&order={attribute}]

When fetching a collection endpoint, you can & should order items in the response by specifying the `order` search parameter. You can order items both by their `sys` properties (such as `sys.createdAt`) or field values (such as `fields.myCustomDateField`).

Note that when ordering Entries by fields you must set the `content_type` URI query parameter to the ID of the Content Type you want to filter by.

Also note that only the following field types can be used alongside the order parameter:

Name   |JSON Primitive|Description
-------|--------------|----------------------------------------------------
Symbol |String        |Basic list of characters. Maximum length is 256.
Integer|Number        |Number type without decimals. Values from  -2^53 to 2^53.
Number |Number        |Number type with decimals.
Date   |String        |Date/Time in ISO-8601 format.
Boolean|Boolean       |Flag, `true` or `false`.

The following field types ** are not** support alongside the order parameter:

Name   |JSON Primitive|Description
-------|--------------|-----------------------------------------------------
Text   |String        |Same as Symbol, but can be filtered via Full-Text Search. Maximum length is 50,000.
Link   |Object        |See [Links](https://www.contentful.com/developers/docs/concepts/links/)
Array  |Array         |List of values. Value type depends on `field.items.type`.
Object |Object        |Arbitrary Object.



+ Parameters
    + space_id (required, string, `cfexampleapi`) ... Alphanumeric `id` of the Space to retrieve.
    + access_token (required, string, `b4c0n73n7fu1`) ... A *production* Content Delivery API Key.
    + attribute (required, string, `sys.createdAt`) ... Attribute to order by.

### Query Entries [GET]

To get all Entries ordered by their creation date.

+ Response 200 (application/vnd.contentful.delivery.v1+json)

  + Attributes (Empty Array)

## Reverse Order [/spaces/{space_id}/entries?access_token={access_token}&order=-{attribute}]

Reverse the sort-order by prefixing the field with a minus-sign.

+ Parameters
    + space_id (required, string, `cfexampleapi`) ... Alphanumeric `id` of the Space to retrieve.
    + access_token (required, string, `b4c0n73n7fu1`) ... A *production* Content Delivery API Key.
    + attribute (required, string, `sys.updatedAt`) ... Attribute to order by.

### Query Entries [GET]

For example, order by time of last update starting with the newest Entries.

+ Response 200 (application/vnd.contentful.delivery.v1+json)

  + Attributes (Empty Array)

## Order with multiple parameters [/spaces/{space_id}/entries?access_token={access_token}&order={attribute},{attribute2}]

Order items by specifying your `order` parameter along with your attributes(`attribute`, `attribute2`). Prefix the field with a minus-sign to reverse the sort-order of your attribute.

+ Parameters
    + space_id (required, string, `cfexampleapi`) ... Alphanumeric `id` of the Space to retrieve.
    + access_token (required, string, `b4c0n73n7fu1`) ... A *production* Content Delivery API Key.
    + attribute (required,string,`sys.revision`) ... First attribute to order by
    + attribute2 (required, string, `sys.id`) ... Second attribute to order by.

### Query Entries [GET]

+ Response 200 (application/vnd.contentful.delivery.v1+json)

  + Attributes (Empty Array)  

## Limit [/spaces/{space_id}/entries?access_token={access_token}&limit={value}]

Specify the maximum number of results as limit search parameter.

Please note that the maximum number of entries returned by the API is 1000. Limits higher than 1000 will be ignored. The default number of entries returned by the API is 100.

+ Parameters
    + space_id (required, string, `cfexampleapi`) ... Alphanumeric `id` of the Space to retrieve.
    + access_token (required, string, `b4c0n73n7fu1`) ... A *production* Content Delivery API Key.
    + value (required, number, `3`) ... Limit for number of results.

### Query Entries [GET]

Example: Limit to 3 Entries.

+ Response 200 (application/vnd.contentful.delivery.v1+json)

  + Attributes (Empty Array)

## Skip [/spaces/{space_id}/entries?access_token={access_token}&skip={value}]

Specify an offset as the skip search parameter.

By combining `skip` and `limit` you can achieve pagination:

    Page 1: skip=0, limit=15
    Page 2: skip=15, limit=15
    Page 3: skip=30, limit=15
    etc.

+ Parameters
    + space_id (required, string, `cfexampleapi`) ... Alphanumeric `id` of the Space to retrieve.
    + access_token (required, string, `b4c0n73n7fu1`) ... A *production* Content Delivery API Key.
    + value (required, number, `3`) ... Offset for results.

### Query Entries [GET]

Example: Skip 3 Entries.

+ Response 200 (application/vnd.contentful.delivery.v1+json)

  + Attributes (Empty Array)

## Including linked Entries [/spaces/{space_id}/entries?access_token={access_token}&include={value}]

Links are a very powerful way to model relationships between pieces of content. Contentful's search is built to make linked data retrieval as simple as adding an additional URI query parameter to retrieve an entire web of related content that you can display in your application.

Learn more [on our Developer Center](https://www.contentful.com/developers/docs/concepts/links/).

Note that only Links between Entries, Spaces and Assets are resolved. Links between Spaces and Content Types are not included in the response when the `include` parameter is specified.

By default, `include` one level is implied, you may set it to zero to not include any links. Up to 10 levels can be included in a single response.

+ Parameters
    + space_id (required, string, `cfexampleapi`) ... Alphanumeric `id` of the Space to retrieve.
    + access_token (required, string, `b4c0n73n7fu1`) ... A *production* Content Delivery API Key.
    + value (required, number, `2`) ... Number of levels to include.

### Query Entries [GET]

Example: Include 2 levels of linked entries.

+ Response 200 (application/vnd.contentful.delivery.v1+json)

  + Attributes (Empty Array)

## Filter by a linked Entry [/spaces/{space_id}/entries?access_token={access_token}&content_type={content_type}&fields.{linking_field}.sys.id={target_entry_id}]

We can retrieve all items linked to a particular target Entry. To do so, a query URL should filter Entries based on their specific `content_type`, `linking_field` (used to link these items) and `entry_id` from the target Entry.

+ Parameters
    + space_id (required, string, `cfexampleapi`) ... Alphanumeric `id` of the Space to retrieve.
    + access_token (required, string, `b4c0n73n7fu1`) ... A *production* Content Delivery API Key.
    + content_type (required, string, `cat`) ... Alphanumeric `id` of the Content Type to retrieve.
    + linking_field (required, string, `bestFriend`) ... Content Type field used to link items
    + target_entry_id (required, string, `nyancat`) ... Alphanumeric `id` of the Target Entry linked to retrieved items

### Query Entries [GET]

Example: Retrieve items linked to `nyancat` through the `bestFriend` field:

+ Response 200 (application/vnd.contentful.delivery.v1+json)

  + Attributes (Empty Array)

## Filtering Assets by MIME-Type [/spaces/{space_id}/assets?access_token={access_token}&mimetype_group={mimetype_group}]

Assets can be filtered by their MIME-Type group by using the `mimetype_group` query parameter. Valid groups are `attachment`, `plaintext`, `image`, `audio`, `video`, `richtext`, `presentation`,
`spreadsheet`, `pdfdocument`, `archive`, `code` and `markup`. By default, all assets will be returned.

+ Parameters
    + space_id (required, string, `cfexampleapi`) ... Alphanumeric `id` of the Space to retrieve.
    + access_token (required, string, `b4c0n73n7fu1`) ... A *production* Content Delivery API Key.
    + mimetype_group (required, string, `image`) ... MIME-Type group to include.

### Query Assets [GET]

Example: Include only image assets.

+ Response 200 (application/vnd.contentful.delivery.v1+json)

  + Attributes (Empty Array)

# Group Localization

## Retrieve localized entries [/spaces/{space_id}/entries/{entry_id}?access_token={access_token}&locale={locale}]

Specify requested locale as locale URI query parameter.

The locale parameter must be the code of a locale in the Space that's being queried, or the special wildcard value `*`. If no locale is specified, the default locale of the Space will be used.

When `locale=*` is specified, field values will be nested in an object with keys corresponding to each locale with a defined value. Instead of writing `fields.name`, you would write `fields.name[localeCode]`.

If the result contains only a single locale, resources will include the property `sys.locale` indicating the locale of that object.

Learn more [on our Developer Center](https://www.contentful.com/developers/docs/concepts/locales/).

+ Parameters
    + space_id (required, string, `cfexampleapi`) ... Alphanumeric `id` of the Space to retrieve.
    + access_token (required, string, `b4c0n73n7fu1`) ... A *production* Content Delivery API Key.
    + entry_id (optional, string, `nyancat`) ... Alphanumeric `id` of the Entry to retrieve.
    + locale (required, string, `tlh`) ... The locale to use.

### Query Entries [GET]

`fields.name` is the only localized Field in the `cat` Content Type, so all other Fields are returned in the default locale.

+ Response 200 (application/vnd.contentful.delivery.v1+json)

  + Attributes (Empty Array)


# Group Synchronization

The Sync API allows you to keep a local copy of all content of a Space up-to-date via delta updates.

Learn more [on our Developer Center](https://www.contentful.com/developers/docs/concepts/sync/).

## Syncing specific content

By default a sync includes all types: Assets, Entries of all Content Types and deletions.

To sync only specific content a type parameter can be specified for the initial sync:


Parameter        |Description                    
-----------------|--------------------------------|
all (default)    |Include all new and changed content, i.e., Assets, Entries and deletions.               
`Asset`          |Only include new and changed Assets.         
`Entry`          |Only include new and changed Entries.       
`Deletion`       |Only include deletions of Assets and Entries.  
`DeletedAsset`   |Only include deletions of Assets.           
`DeletedEntry`   |Only include deletions of Entries.      
    


## Initial synchronisation [/spaces/{space_id}/sync?access_token={access_token}&initial=true&type={type}]

A client syncs content by using the sync endpoint. A single sync consists of one or more pages, each a separate request and response.

The first time a client synchronizes content it sends a request to the sync endpoint with the URI query parameter `initial` set to `true`.

Syncing with `initial=true` should only be done once for the initial sync when a client has no prior content. This transfers all content from a Space since its creation. The inital sync contains neither deleted content nor deletions.

+ Parameters
    + space_id (required, string, `cfexampleapi`) ... Alphanumeric `id` of the Space to retrieve.
    + access_token (required, string, `b4c0n73n7fu1`) ... A *production* Content Delivery API Key.
    + type (optional, string, `Deletion`) ... The type of Resource to sync.

### Query Entries [GET]

+ Response 200 (application/vnd.contentful.delivery.v1+json)

  + Attributes (Empty Array)

## Initial synchronisation of Entries of a specific Content Type [/spaces/{space_id}/sync?access_token={access_token}&initial=true&type=Entry&content_type={content_type_id}]

For Entries, you can also specify a `content_type` parameter. When specifying `content_type` you must specify type as `Entry` (meaning that there will be no deletions). The `type` and `content_type` parameter can only be specified at the initial sync along with the `initial` parameter. Any subsequent syncs will only include the types you have specified. If you want to sync Entries by Content Type you should separately subscribe to a `Deletion` or `DeletedEntry` sync to get notified when Entries are deleted.

+ Parameters
    + space_id (required, string, `cfexampleapi`) ... Alphanumeric `id` of the Space to retrieve.
    + access_token (required, string, `b4c0n73n7fu1`) ... A *production* Content Delivery API Key.
    + content_type_id (required, string, `cat`) ... Alphanumeric `id` of the Content Type to retrieve.

### Query Entries [GET]

+ Response 200 (application/vnd.contentful.delivery.v1+json)

  + Attributes (Empty Array)

## Pagination and subsequent syncs [/spaces/{space_id}/sync?access_token={access_token}&sync_token={sync_token}]

Synchronization responses contain either a `nextPageUrl` or `nextSyncUrl` attribute. If there is more content for the current sync, `nextPageUrl` will contain an URL with a `sync_token` which will retrieve the next page. This continues until all current content has been retrieved. At this point, the response will contain a `nextSyncUrl` which can be used to make requests in the future and retrieve delta updates between the current content on Contentful and the one you retrieved with your last sync request. Upon completion, you will receive a new `nextSyncUrl` which can again be used for future updates.

If for some reason a client loses the `nextSyncUrl`, the client should delete its local content and perform the initial synchronization again.

+ Parameters
    + space_id (required, string, `cfexampleapi`) ... Alphanumeric `id` of the Space to retrieve.
    + access_token (required, string, `b4c0n73n7fu1`) ... A *production* Content Delivery API Key.
    + sync_token (required, string, `w5ZGw6JFwqZmVcKsE8Kow4grw45QdybCnV_Cg8OASMKpwo1UY8K8bsKFwqJrw7DDhcKnM2RDOVbDt1E-wo7CnDjChMKKGsK1wrzCrBzCqMOpZAwOOcOvCcOAwqHDv0XCiMKaOcOxZA8BJUzDr8K-wo1lNx7DnHE`) ... An opaque token which is used to identify your previous sync.

### Query Entries [GET]

+ Response 200 (application/vnd.contentful.delivery.v1+json)

  + Attributes (Empty Array)

## Data Structures

### Asset

- Include Asset Update
- sys - System Attributes
    - id: nyancat - Identifier
    - type: Asset - Type of Resource
    - space (Space Link)
    - Include Resource Metadata

### Asset Update

- fields - Field Values
    - title: Nyan Cat
    - file
          - contentType: image/png
          - fileName: Nyan_cat_250px_frame.png
          - upload: //images.contentful.com/cfexampleapi/4gp6taAwW4CmSgumq2ekUm/9da0cd1936871b8d72343e895a00d611/Nyan_cat_250px_frame.png
          - details
              - image
                - width: 250 (number)
                - height: 250 (number)
              - size: 12273 (number)

### Content Type

- fields (array) - Fields
    - (object)
        - id: name
        - name: Name
        - type: Text
        - required: true (boolean)
        - localized: true (boolean)
    - (object)
        - id: likes
        - name: Likes
        - type: Array
        - required: false (boolean)
        - localized: false (boolean)
        - `items`
            - type: Symbol
    - (object)
        - id: color
        - name: Color
        - type: Symbol
        - required: false (boolean)
        - localized: false (boolean)
    - (object)
        - id: bestFriend
        - name: Best Friend
        - type: Link
        - required: false (boolean)
        - localized: false (boolean)
        - linkType: Entry
    - (object)
        - id: birthday
        - name: Birthday
        - type: Date
        - required: false (boolean)
        - localized: false (boolean)
    - (object)
        - id: lifes
        - name: Lifes left
        - type: Integer
        - required: false (boolean)
        - localized: false (boolean)
        - disabled: true (boolean)
    - (object)
        - id: lives
        - name: Lives left
        - type: Integer
        - required: false (boolean)
        - localized: false (boolean)
    - (object)
        - id: image
        - name: Image
        - type: Link
        - required: false (boolean)
        - localized: false (boolean)
        - linkType: Asset
- sys
    - space (Space Link)
    - type: ContentType
    - id: cat
    - Include Resource Metadata
- name: Cat
- displayField: name
- description: Meow.

### Content Type Link
- sys
    - type: Link - Type of Resource
    - linkType: ContentType - Type of linked Resources
    - id: hfM9RCJIk0wIm06WkEOQY - Identifier of Resource

### Empty Array

- sys - System Attributes
    - type: Array - Type of Resource
- total: 0 (number) - Total number of resources matching
- skip: 0 (number) - Number of resources skipped
- limit: 100 (number) - Maximum number of resources in this response
- items (array) - Resources contained in the array

### Entry

- Include Entry Update
- sys - System Attributes
    - id: helloworld - Identifier of Resource
    - type: Entry - Type of Resource
    - version: 1 (number) - Version of Resource
    - space (Space Link)
    - contentType (Content Type Link)
    - Include Resource Metadata

### Entry Update

- fields - Localized field values
    - title
        - `en-US`: `Hello, World!`
    - body
        - `en-US`: Bacon is healthy!

### Resource Metadata

- createdAt: `2015-05-18T11:29:46.809Z` - Creation date
- updatedAt: `2015-05-18T11:29:46.809Z` - Date/time of last update
- locale: `en-US`
- revision: 1 (number)

### Space Link
- sys - System Attributes
    - type: Link - Type of Resource
    - linkType: Space - Type of linked resources
    - id: 5smsq22uwt4m - Identifier of Resource

